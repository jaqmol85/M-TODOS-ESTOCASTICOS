import pandas as pd

# Definir los datos
datos = [
    [1, 1.70, 1.30],
    [2, 6.26, 17.02],
    [3, 7.56, 19.74],
    [4, 7.92, 12.01],
    [5, 0.96, 0.66],
    [6, 2.47, 1.80],
    [7, 2.55, 15.91],
    [8, 0.28, 0.62],
    [9, 1.34, 2.15],
    [10, 0.71, 2.07],
    [11, 1.66, 4.68],
    [12, 2.99, 2.74],
    [13, 8.71, 11.72],
    [14, 0.09, 0.24],
    [15, 0.62, 2.30],
    [16, 0.99, 0.52],
    [17, 10.27, 5.67],
    [18, 2.96, 3.17],
    [19, 5.54, 5.92],
    [20, 3.61, 5.03]
]

# Convertir los datos en un DataFrame
df = pd.DataFrame(datos, columns=['Dato', 'A', 'B'])

# Mostrar el DataFrame
print(df)

import matplotlib.pyplot as plt

# Crear subplots para los tres histogramas
fig, axs = plt.subplots(1, 3, figsize=(18, 6))

# Generar histograma con anchura de clases de 1 unidad
axs[0].hist(df['A'], bins=int(df['A'].max()-df['A'].min()), range=(df['A'].min(), df['A'].max()))
axs[0].set_title('Histograma A (Anchura de clase = 1)')
axs[0].set_xlabel('Valor')
axs[0].set_ylabel('Frecuencia')

# Generar histograma con anchura de clases de 2 unidades
axs[1].hist(df['A'], bins=int((df['A'].max()-df['A'].min())/2), range=(df['A'].min(), df['A'].max()))
axs[1].set_title('Histograma A (Anchura de clase = 2)')
axs[1].set_xlabel('Valor')
axs[1].set_ylabel('Frecuencia')

# Generar histograma con anchura de clases de 5 unidades
axs[2].hist(df['A'], bins=int((df['A'].max()-df['A'].min())/5), range=(df['A'].min(), df['A'].max()))
axs[2].set_title('Histograma A (Anchura de clase = 5)')
axs[2].set_xlabel('Valor')
axs[2].set_ylabel('Frecuencia')

plt.tight_layout()
plt.show()

# Crear subplots para los tres histogramas
fig, axs = plt.subplots(1, 3, figsize=(18, 6))

# Generar histograma con anchura de clases de 1 unidad
axs[0].hist(df['B'], bins=int(df['B'].max()-df['B'].min()), range=(df['B'].min(), df['B'].max()))
axs[0].set_title('Histograma B (Anchura de clase = 1)')
axs[0].set_xlabel('Valor')
axs[0].set_ylabel('Frecuencia')

# Generar histograma con anchura de clases de 2 unidades
axs[1].hist(df['B'], bins=int((df['B'].max()-df['B'].min())/2), range=(df['B'].min(), df['B'].max()))
axs[1].set_title('Histograma B (Anchura de clase = 2)')
axs[1].set_xlabel('Valor')
axs[1].set_ylabel('Frecuencia')

# Generar histograma con anchura de clases de 5 unidades
axs[2].hist(df['B'], bins=int((df['B'].max()-df['B'].min())/5), range=(df['B'].min(), df['B'].max()))
axs[2].set_title('Histograma B (Anchura de clase = 5)')
axs[2].set_xlabel('Valor')
axs[2].set_ylabel('Frecuencia')

plt.tight_layout()
plt.show()

import numpy as np

# Generar la distribución acumulativa para la columna 'A'
values, base = np.histogram(df['A'], bins=40)
cumulative_A = np.cumsum(values)

# Generar la distribución acumulativa para la columna 'B'
values, base = np.histogram(df['B'], bins=40)
cumulative_B = np.cumsum(values)

# Crear subplots para las dos distribuciones acumulativas
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

# Graficar la distribución acumulativa de 'A'
axs[0].plot(base[:-1], cumulative_A, c='blue')
axs[0].set_title('Distribución Acumulativa de A')
axs[0].set_xlabel('Valor')
axs[0].set_ylabel('Frecuencia Acumulada')

# Graficar la distribución acumulativa de 'B'
axs[1].plot(base[:-1], cumulative_B, c='blue')
axs[1].set_title('Distribución Acumulativa de B')
axs[1].set_xlabel('Valor')
axs[1].set_ylabel('Frecuencia Acumulada')

plt.tight_layout()
plt.show()

import pandas as pd
from scipy.stats import kurtosis, skew, iqr

# Cálculo de estadísticas para la columna 'A'
mean_A = df['A'].mean()
var_A = df['A'].var()
skew_A = skew(df['A'])
kurtosis_A = kurtosis(df['A'])
quantiles_A = df['A'].quantile([0.25, 0.5, 0.75])
median_A = df['A'].median()
iqr_A = iqr(df['A'])

print(f"Estadísticas de 'A':\nMedia: {mean_A}\nVarianza: {var_A}\nAsimetría: {skew_A}\nCurtosis: {kurtosis_A}\nCuantiles: {quantiles_A}\nMediana: {median_A}\nRango intercuartílico: {iqr_A}\n")

# Cálculo de estadísticas para la columna 'B'
mean_B = df['B'].mean()
var_B = df['B'].var()
skew_B = skew(df['B'])
kurtosis_B = kurtosis(df['B'])
quantiles_B = df['B'].quantile([0.25, 0.5, 0.75])
median_B = df['B'].median()
iqr_B = iqr(df['B'])

print(f"Estadísticas de 'B':\nMedia: {mean_B}\nVarianza: {var_B}\nAsimetría: {skew_B}\nCurtosis: {kurtosis_B}\nCuantiles: {quantiles_B}\nMediana: {median_B}\nRango intercuartílico: {iqr_B}\n")

import matplotlib.pyplot as plt

# Crear subplots para los dos boxplots
fig, axs = plt.subplots(1, 2, figsize=(12, 6))

# Dibujar el boxplot para 'A'
axs[0].boxplot(df['A'])
axs[0].set_title('Boxplot de A')
axs[0].set_ylabel('Valor')

# Dibujar el boxplot para 'B'
axs[1].boxplot(df['B'])
axs[1].set_title('Boxplot de B')
axs[1].set_ylabel('Valor')

plt.tight_layout()
plt.show()

# Calcular el porcentaje de muestras que exceden la concentración crítica
porcentaje_critico = (df['A'] > 5).mean()

# Calcular el área que debe ser limpiada
area_limpiar = porcentaje_critico * 8000

print(f"El área aproximada del sitio que debe ser limpiada es {area_limpiar} m^2.")

# Calcular el porcentaje de muestras que exceden la concentración crítica
porcentaje_critico = (df['B'] > 10).mean()

# Calcular el área que debe ser limpiada
area_limpiar = porcentaje_critico * 8000

print(f"El área aproximada del sitio que debe ser limpiada es {area_limpiar} m^2.")

# Calcular el coeficiente de correlación entre 'A' y 'B'
coef_correlacion = df['A'].corr(df['B'])

print(f"El coeficiente de correlación entre 'A' y 'B' es {coef_correlacion}.")

# Calcular la fracción de los datos donde 'A' es menor que 5 y 'B' es menor que 10
fraccion = ((df['A'] < 5) & (df['B'] < 10)).mean()

print(f"La fracción de los datos donde 'A' es menor que 5 y 'B' es menor que 10 es {fraccion}.")


# Calcular la fracción de los datos donde 'A' es menor que 5 o 'B' es menor que 10
fraccion = ((df['A'] < 5) | (df['B'] < 10)).mean()

print(f"La fracción de los datos donde 'A' es menor que 5 o 'B' es menor que 10 es {fraccion}.")
